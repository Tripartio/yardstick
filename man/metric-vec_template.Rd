% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/template.R
\name{metric-vec_template}
\alias{metric-vec_template}
\alias{numeric_metric_vec_template}
\alias{class_metric_vec_template}
\alias{prob_metric_vec_template}
\title{Developer function for calling new metrics}
\usage{
numeric_metric_vec_template(
  metric_impl,
  truth,
  estimate,
  na_rm = TRUE,
  case_weights = NULL,
  ...
)

class_metric_vec_template(
  metric_impl,
  truth,
  estimate,
  na_rm = TRUE,
  case_weights = NULL,
  ...
)

prob_metric_vec_template(
  metric_impl,
  truth,
  estimate,
  na_rm = TRUE,
  case_weights = NULL,
  ...
)
}
\arguments{
\item{metric_impl}{The core implementation function of your custom metric.
This core implementation function is generally defined inside the vector
method of your metric function.}

\item{truth}{The realized vector of \code{truth}. This is either a factor or a
numeric.}

\item{estimate}{The realized \code{estimate} result. This is either a numeric
vector, a factor vector, or a numeric matrix (in the case of multiple class
probability columns) depending on your metric function.}

\item{na_rm}{A \code{logical} value indicating whether \code{NA} values should be
stripped before the computation proceeds. \code{NA} values are removed before
getting to your core implementation function so you do not have to worry
about handling them yourself. If \code{na_rm=FALSE} and any \code{NA} values exist,
then \code{NA} is automatically returned.}

\item{case_weights}{The realized case weights, as a numeric vector. This must
be the same length as \code{truth}, and will be considered in the \code{na_rm}
checks. This will be passed on to \code{metric_impl} as the named argument
\code{case_weights}.}

\item{...}{Extra arguments to your core metric function, \code{metric_impl}, can
technically be passed here, but generally the extra args are added through
R's scoping rules because the core metric function is created on the fly
when the vector method is called.}
}
\description{
\code{class_metric_vec_template()}, \code{numeric_metric_vec_template()}, and
\code{prob_metric_vec_template()} are useful alongside the \code{\link[=metric-summarizers]{metric-summarizers()}}
functions for implementing new custom metrics. \code{\link[=metric-summarizers]{metric-summarizers()}} calls
the metric function inside \code{dplyr::summarise()}.
\code{class_metric_vec_template()}, \code{numeric_metric_vec_template()}, and
\code{prob_metric_vec_template()} are generalized function that calls the core
implementation of a metric function.
}
\details{
\code{class_metric_vec_template()}, \code{numeric_metric_vec_template()}, and
\code{prob_metric_vec_template()} are called from the vector implementation of
your metric. Also defined inside your vector implementation is a separate
function performing the core implementation of the metric function. This
core function is passed along as \code{metric_impl}.
}
\seealso{
\code{\link[=metric-summarizers]{metric-summarizers()}} \code{\link[=finalize_estimator]{finalize_estimator()}} \code{\link[=dots_to_estimate]{dots_to_estimate()}}
}
