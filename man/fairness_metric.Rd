% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fair-aaa.R
\name{fairness_metric}
\alias{fairness_metric}
\title{Create fairness metrics}
\usage{
fairness_metric(.fn, .name, .post, direction = "minimize")
}
\arguments{
\item{.fn}{A yardstick metric function or metric set.}

\item{.name}{The name of the metric to place in the \code{.metric} column
of the output.}

\item{.post}{A function to post-process the generated metric set results \code{x}.
In many cases, \code{~diff(range(x$.estimate))} or
\verb{~r <- range(x$.estimate); r[1]/r[2]}.}

\item{direction}{A string. One of:
\itemize{
\item \code{"maximize"}
\item \code{"minimize"}
\item \code{"zero"}
}}
}
\value{
This function is a
\href{https://adv-r.hadley.nz/function-factories.html}{function factory}; it's
output is itself a function. Further, the functions that this function
outputs are also function factories. More explicitly, this looks like:

\if{html}{\out{<div class="sourceCode">}}\preformatted{# a function with similar implementation to `demographic_parity()`:
diff_range <- function(x) \{diff(range(x$.estimate))\}

dem_parity <-
  fairness_metric(
    .fn = detection_prevalence,
    .name = "dem_parity",
    .post = diff_range
  )
}\if{html}{\out{</div>}}

The outputted \code{dem_parity} is a function that takes one argument, \code{by},
indicating the data-masked variable giving the sensitive feature.

When called with a \code{by} argument, \code{dem_parity} will return a yardstick
metric function like any other:

\if{html}{\out{<div class="sourceCode">}}\preformatted{dem_parity_by_gender <- dem_parity(gender)
}\if{html}{\out{</div>}}

Note that \code{dem_parity} doesn't take any arguments other than \code{by}, and thus
knows nothing about the data it will be applied to other than that it ought
to have a column with name \code{"gender"} in it.

The output \code{dem_parity_by_gender} is a metric function that takes the
same arguments as the function supplied as \code{fn}, in this case
\code{detection_prevalence}. It will thus interface like any other yardstick
function except that it will look for a \code{"gender"} column in
the data it's supplied.

In addition to the examples below, see the documentation on the
return value of fairness metrics like \code{\link[=demographic_parity]{demographic_parity()}},
\code{\link[=equal_opportunity]{equal_opportunity()}}, or \code{\link[=equalized_odds]{equalized_odds()}} to learn more about how the
output of this function can be used.
}
\description{
Fairness metrics quantify the disparity in value of a metric across a number
of groups. Fairness metrics with a value of zero indicate that the
underlying metric has parity across groups. yardstick defines
several common fairness metrics using this function, such as
\code{\link[=demographic_parity]{demographic_parity()}}, \code{\link[=equal_opportunity]{equal_opportunity()}}, and \code{\link[=equalized_odds]{equalized_odds()}}.
}
\section{Relevant Group Level}{

Additional arguments can be passed to the function outputted by
the function that this function outputs. That is:

\if{html}{\out{<div class="sourceCode">}}\preformatted{res_fairness <- fairness_metric(...)
res_by <- res_fairness(by)
res_by(..., additional_arguments_to_.post = TRUE)
}\if{html}{\out{</div>}}

For finer control of how groups in \code{by} are treated, use the
\code{.post} argument.
}

\examples{
data(hpc_cv)

# `demographic_parity`, among other fairness metrics,
# is generated with `fairness_metric()`:
diff_range <- function(x) {diff(range(x$.estimate))}
demographic_parity_ <-
  fairness_metric(
    .fn = detection_prevalence,
    .name = "demographic_parity",
    .post = diff_range
  )

m_set <- metric_set(demographic_parity_(Resample))

m_set(hpc_cv, truth = obs, estimate = pred)

# the `post` argument can be used to accommodate a wide
# variety of parameterizations. to encode demographic
# parity as a ratio inside of a difference, for example:
ratio_range <- function(x, ...) {
  range <- range(x$.estimate)
  range[1] / range[2]
}

demographic_parity_ratio <-
  fairness_metric(
    .fn = detection_prevalence,
    .name = "demographic_parity_ratio",
    .post = ratio_range
  )

}
